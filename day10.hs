import Local.IO.AdventOfCode
import Control.Monad
import Control.Arrow
import Data.Function
import Data.List
import Data.Maybe

today = "10"

-- Conway's Table of Elements

elementTable :: [String]
elementTable = map show [0,
        22, 13112221133211322112211213322112, 312211322212221121123222112, 111312211312113221133211322112211213322112,
        1321132122211322212221121123222112, 3113112211322112211213322112, 111312212221121123222112, 132112211213322112,
        31121123222112, 111213322112, 123222112, 3113322112, 1113222112, 1322112, 311311222112, 1113122112, 132112, 3112,
        1112, 12, 3113112221133112, 11131221131112, 13211312, 31132, 111311222112, 13122112, 32112, 11133112, 131112,
        312, 13221133122211332, 31131122211311122113222, 11131221131211322113322112, 13211321222113222112, 3113112211322112,
        11131221222112, 1321122112, 3112112, 1112133, 12322211331222113112211, 1113122113322113111221131221, 13211322211312113211,
        311322113212221, 132211331222113112211, 311311222113111221131221, 111312211312113211, 132113212221, 3113112211,
        11131221, 13211, 3112221, 1322113312211, 311311222113111221, 11131221131211, 13211321, 311311, 11131, 1321133112,
        31131112, 111312, 132, 311332, 1113222, 13221133112, 3113112221131112, 111312211312, 1321132, 311311222, 11131221133112,
        1321131112, 311312, 11132, 13112221133211322112211213322113, 312211322212221121123222113,
        111312211312113221133211322112211213322113, 1321132122211322212221121123222113, 3113112211322112211213322113,
        111312212221121123222113, 132112211213322113, 31121123222113, 111213322113, 123222113, 3113322113, 1113222113,
        1322113, 311311222113, 1113122113, 132113, 3113, 1113, 13, 3
    ] 

evolutionTable :: [[Int]]
evolutionTable = [[],
        [1],[72,91,1,20,3],[2],[32,20,3],[4],[5],[6],[7],[8],[9],
        [10],[61,11],[12],[13],[67,14],[15],[16],[17],[18],[19],
        [67,91,1,20,27],[21],[22],[23],[24,14],[25],[26],[30,27],
        [28],[29],[63,20,89,1,20,30],[67,31],[32,11],[33],[34],[35],[36],[37],[38,92],
        [39,1,20,43],[68,40],[41],[42],[63,20,43],[67,44],[45],[46],[47],[48],[49],
        [61,50],[63,20,51],[67,52],[53],[54],[55],[56],[57,1,20,27],[58],[59],
        [60],[61,20,30],[62],[63,20,27],[67,64],[65],[66],[67,61],[68,20,27],[69],
        [70],[71],[72,91,1,20,74],[73],[32,20,74],[75],[76],[77],[78],[79],
        [80],[81],[61,82],[83],[84],[67,85],[86],[87],[88],[89],
        [90],[91]
    ]

lengthTable :: [Integer]
lengthTable = map (fromIntegral . length) elementTable

termwiseSum :: [[Integer]] -> [Integer]
termwiseSum list | tail list == [] = head list
                 | otherwise       = zipWith (+) (head list) (termwiseSum (tail list))

conway :: [[Integer]]
conway = []:[lengthTable !! seed : termwiseSum (map (conway !!) (evolutionTable !! seed)) | seed <- [1..92]]

main :: IO ()
main = print part1 >> print part2 where
    seed = 87
    part1 = conway !! seed !! 40
    part2 = conway !! seed !! 50
